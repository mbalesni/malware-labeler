#!/Users/macbook/anaconda3/bin/python

import json
import os
import hashlib
import time
import sys
from virus_total_apis import PublicApi as VirusTotalPublicApi
from dotenv import load_dotenv

load_dotenv()

PER_DAY_LIMIT = 1000
PER_MINUTE_LIMIT = 4
SLEEP_AFTER_REQUEST = 60 / 4
SLEEP_AFTER_DAY_LIMIT = 24 * 60 * 60

INPUT_DIR = os.getenv('INPUT_DIR') or './malware'
RESULTS_DIR = os.getenv('RESULTS_DIR') or './results'

def authenticate():
    try:
        API_KEY = os.getenv('API_KEY')
        return VirusTotalPublicApi(API_KEY)
    except:
        raise Exception('Provide API key in .env')

def list_hashes(dir_name):
    hashes = []
    for root, _, files in os.walk(dir_name):
        for f in files:
            if len(f) == 32: # md5 hash
                hashes.append(f)
    return hashes

def get_file_size(path):
    return os.stat(path).st_size

def save_requests_made(number):
    with open('.env', 'r+') as env_file:
        old_lines = env_file.readlines()
        new_lines = []
        for line in old_lines:
            if 'REQUESTS_MADE' in line:
                new_lines.append('REQUESTS_MADE=' + str(number))
            else:
                new_lines.append(line)
        
        env_file.seek(0)
        env_file.truncate()
        env_file.writelines(new_lines)

if __name__ == '__main__':

    try:
        if not os.path.exists(RESULTS_DIR):
            os.makedirs(RESULTS_DIR, exist_ok=True)

        vt = authenticate()

        hashes = list_hashes(INPUT_DIR)

        requests_made = int(os.getenv('REQUESTS_MADE'))

        for i, md5hash in enumerate(hashes):
            output_path = os.path.join(RESULTS_DIR, md5hash + '.json')

            if os.path.exists(output_path):
                continue

            response = vt.get_file_report(md5hash)
            requests_made += 1
            result = {}

            if response['response_code'] != 200:
                print(time.ctime() + ' [' + md5hash + '][' + str(i) + '] Error getting report. Saving empty result file... Requests made in day:' + str(requests_made % PER_DAY_LIMIT) + '/' + str(PER_DAY_LIMIT))
            elif response['results']['response_code'] != 1:
                print(time.ctime() + ' [' + md5hash + '][' + str(i) + '] Not found. Saving empty result file... Requests made in day:' + str(requests_made % PER_DAY_LIMIT) + '/' + str(PER_DAY_LIMIT))
            else:
                result['scans'] = response['results']['scans']
                result['detection_percentage'] = response['results']['positives'] / response['results']['total']
                print(time.ctime() + ' [' + md5hash + '][' + str(i) + '] Success. Requests made in day:' + str(requests_made % PER_DAY_LIMIT) + '/' + str(PER_DAY_LIMIT))

            with open(output_path, 'w') as output_file:
                output_file.write(json.dumps(result))

            save_requests_made(requests_made)
            time.sleep(SLEEP_AFTER_REQUEST)

            if (requests_made % PER_DAY_LIMIT) == 0 and (requests_made != 0):
                print(time.ctime() + ' [Announcement] Day limit reached. Sleeping for ' + str(SLEEP_AFTER_DAY_LIMIT / 60 / 60) + ' hours')
                time.sleep(SLEEP_AFTER_DAY_LIMIT)
    except (KeyboardInterrupt, SystemExit):
        save_requests_made(requests_made)
        sys.exit(0)
    except Exception as err:
        raise